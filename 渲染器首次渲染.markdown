# 渲染器首次渲染流程
## 实现初始化component主流程

先看看，vue3中初始绑定html的写法

~~~html
 <!DOCTYPE html>
 <html lang="en">
   <head>
     <meta charset="UTF-8">
     <meta http-equiv="X-UA-Compatible" content="IE=edge">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
   </head>
   <body>
     <div id="app"></div>
     <!-- 避免使用打包工具打包，降低流程，便于调试，这里直接将逻辑放在render.js中，使用script标签进行引入 -->
     <script src="./process/render.js"></script>
   </body>
 </html>
~~~

html的内容如何与vue3中的逻辑代码进行绑定？依靠的是Vue项目工程main.js文件汇总

~~~js
import App from './App.vue'


// 处理vue中组件逻辑内容，再挂载到真实dom节点上
createApp(App).mount('#app')                                
~~~

先不关心`createApp`和`mount`函数的实现。createApp接受的参数`App`就是通常在vue项目工程主文件的`App.js`中，通常也是vue项目的主入口：

~~~vue
export default {
    setup() {
        return {}
    }
}

 <template>
  <div>
   	hello mini-vue!
  </div>
</template>
~~~

vue3提供`render`和`h函数`，用于编程式地创建组件虚拟DOM树的函数，解析和创建`vnode`节点。

本文中单文件组件不在template中写，这需要编译能力，而是直接在render函数中实现

~~~js
 // 第二种方式
export const App = {
  render() {
    return h("div", "hi, " + this.msg)
  },

  setup() {
    // composition api

    return {
      msg: 'mini-vue'
    }
  }
}
~~~

<img src="C:\Users\MSK\AppData\Roaming\Typora\typora-user-images\image-20221202133657665.png" alt="image-20221202133657665" style="zoom: 200%;" />

### createApp

`createApp(App).mount("#app")`

在createApp中，接受App单文件组件内容（App.js），需要返回一个对象，这个对象有一个mount方法，会把单文件组件先转化为虚拟节点，后续所有逻辑也都基于虚拟节点处理，最后将其挂载到根节点上

~~~ts
export function createApp(rootComponent) {
  return {
    mount(rootContainer) {
      // 先把所有东西转化为虚拟节点vnode
      // 后续所有逻辑操作基于 vnode 处理

      const vnode = createVNode(rootComponent)

      render(vnode, rootContainer);
    }
  }
}
~~~

### createVNode

createVNode用于创建虚拟节点，`type`描述节点对象，`props`描述属性，`children`描述子节点

~~~ts
export function createVNode(type, props?, children?) { // ?表示可选参数
  const vnode = {
    type,
    props,
    children
  };

  return vnode
}
~~~

### render & patch

render函数为处理和渲染 vnode 的入口函数

patch函数为处理节点类型的中转站，此时只增加`component`的逻辑：

~~~ts
export function render(vnode, container) {

  // 调用patch方法（方便后续递归处理）
  patch(vnode, container)
}

 const patch = function(vnode, container) {
   // 调用processComponent函数，对component的vnode进行处理
   processComponent(vnode, container)
 }
~~~

### processComponent

继续调用mountCompount对组件解析

~~~js
 const processComponent = function(vnode, container) {
   mountComponent(vnode, container)
 }
~~~

### mountComponent

用于拆解组件，组件中有`setup()`和`render() {}`

所以`mountComponent`首先要执行`setup`，setup的返回值是dom中需要触发、渲染用到的数据。再对`render`函数中`h`函数返回的vnode进行处理和渲染

~~~ts
function mountComponent(vnode, container) {
  // 创建组件实例
  const instance = createComponentInstance(vnode);
  // 处理setup  
  setupComponent(instance)
  // 处理render
  setupRenderEffect(instance, container)
}
~~~

------ 分割线 下面为一系列的`componet`处理函数 ------

`component.ts`

#### createComponentInstance

createComponentInstance用于创建额包装一个component对象，挂载属性，便于后续处理

~~~js
function createComponentInstance(vnode) {
    const component = {
        vnode,
        type: vnode.type,
        // 用于保存setup函数执行结果
        setupState: {}
    }

	return component
}
~~~

#### setupComponent

继续调用setupStatefulComponent对setup函数处理

~~~ts
function setupComponent(instance) {
    setupStatefulComponent(instance)
}
~~~

#### setupStatefulComponent

调用setup函数，保存执行结果

~~~js
function setupStatefulComponent(instance) {
    // 如果使用component组件来初始化vnode，整个组件对象会保存在type中
    const component = instance.type
    const { setup } = component
    
    if (setup) {
        // 执行setup
        const setupResult = setup()
        // 调用handleSetupResult处理
        handleSetupResult(instance, setupResult)
    }
}
~~~

需要注意的是，关于在什么地方获取`setup`，如果使用`component`来初始化`vnode`，整个的组件对象会保存在`vnode`的`type`中，这一点是和`element`有区别的。可以看一下`createVNode`函数的实现和调用逻辑。

#### handleSetupResult

保存setup函数的执行结果，便于后续应用

~~~ts
function handleSetupResult(instance, setupResult) {
    if (typeof setupResult === 'object') {
        // 将执行结果设置到ocmponent的实例中
        instance.setupState = setupResult
    }
    // 取得vnode中的render函数，保存到component的实例中，相当于解构，少一层访问
    instance.render = instance.type.render
}
~~~

------ 分割线 `component`类型调用结束 ------

### setupRenderEffect

开始调用vnode中的render函数，处理vnode节点

~~~ts
 const setupRenderEffect = function(instance, container) {
   // 执行render函数
   const subTree = instance.render()
   // 由于执行render后返回依然是一个vnode对象，继续递归调用patch进行处理
   patch(subTree, container)
 }
~~~

## rollup打包库

+ `Rollup`是一个模块打包器，和`webpack`类似
+ `Rollup`支持`Tree-shaking`，开元静态分析代码中的`import`，排除不被使用的代码
  + `webpack`虽然也支持，但是需要我们手动配置
+ 打包的结果比`webpack`小
+ 打包框架/组件库使用`Rollup`更合适



安装rollup

~~~powershell
yarn add rollup --dev
~~~

创建rollup.config.js，配置

~~~js
import typescript from "@rollup/plugin-typescript";

export default {
  // 入口文件
  input: "./src/index.ts",
  // 出口文件
  output: [
    // 1.cjs -> comonjs
    // 2.esm -> es6模块规范（标准）
    {
      format: "cjs",
      file: "lib/guide-mini-vue.csj.js",
    },
    {
      format: "es",
      file: "lib/guide-mini-vue.esm.js",
    },
  ],
  /// 安装转译官方插件 ts-->js @rollup/plugin-typescript
  plugins: [typescript()],
};
~~~

在package.json中配置一下rollup命令

-c指定运行的文件

~~~json
"scripts": {
    "build": "rollup -c rollup.config.js"
}
~~~

同时还需要安装`@rollup/plugin-typescript`，`typescript`,`tslib`相关依赖



在runtime-core中需要导出createApp和h

~~~ts
// runtime-core/index.ts

export { createApp } from "./creatApp" 
export { h } from "./h"
~~~

在出口文件中把runtime-core中全部导出

~~~ts
// src/index.ts

export * from './runtime-core/index'
~~~

之前的流程已经处理，接下来写个hello world，创建exanple/helloworld

App.js

```js
import { h } from '../../lib/mini-vue.esm.js'
 
export const App = {
  render() {
    return h("div", "hi, " + this.msg)
  },

  setup() {
    // composition api

    return {
      msg: 'mini-vue'
    }
  }
}
```

index.html

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>mini-vue</title>
</head>
<body>
    <div id="app"></div>
    <script src="main.js" type="module"></script>
</body>
</html>
```

main.js

```js
import { createApp } from "../../lib/mini-vue.esm.js"
import { App } from "./App.js"

const rootContainer = document.querySelector("#app")
createApp(App).mount(rootContainer)
```

到此为止，最基本的框架搭建完成。

我们运行index.html，报错instance.render不是一个function

<img src="C:\Users\MSK\AppData\Roaming\Typora\typora-user-images\image-20221204205102827.png" alt="image-20221204205102827" style="zoom:50%;" />

原因：

在main.js中，`creatApp(App).mount(rootContainer)`会调用`render`，再调用`patch`，调用其他函数之后，还会递归调用patch处理，此时patch处理的不是组件而是element（`div`），此时并没有render这个函数，所以报错。后续针对`render`要区分`element`和`component`

**路径优化：**

在package.json中配置esm和cjs的入口

~~~json
"main": "lib/mini-vue.cjs.js",
"moudle": "lib/mini-vue.esm.js"
~~~

~~~js
import pkg from './package.json'

  output: [
    // 1.cjs -> comonjs
    // 2.esm -> es6模块规范（标准）
    {
      format: "cjs",
      file: "pkg.main",
    },
    {
      format: "es",
      file: "pkg.moudle",
    },
  ], 
~~~

## 初始化element主流程

当我们`createApp(app).mount(rootContainer)`后，会将app变成vnode，并调用其中的render函数，render函数在处理render时，执行`setupRenderEffect`返回的值还是vnode会再调用patch函数，但是**此时的vnode不是component而是element**，这里要进行区分。

~~~js
  render() {
    return h("div", {
      id: "root",
      class: ["red", "hard"],
    },
      // "hi, mini-vue"  children是简单的string类型
      [h("p", {class: "red"}, "hi"), h("p", {class: "blue"}, "mini-vue")]
    )
  },
~~~

### h函数

h函数同样是返回一个vnode，参数也是type、porps和children

~~~ts
 const h = function(type, props, children) {
   return createVNode(type, props, children)
 }
~~~

### 修改patch中处理element

+ 从`vnode.type`区分到底是element还是component

  + string类型 => element，object => component

+ processElement中调用mountElement

  + `document.createElement(vnode.type)`创建一个el

  + `const {children, props} = vnode`解构一下vnode

  + 如果children是string，直接`el.textContent = children`，如果children是数组，还需要递归调用patch，注意此时patch的container参数是当前的el

  + 遍历props，利用`el.setArrtibute(key, value)`赋予属性
+ `container.append(el)`最后把当前el添加到container容器中（这里container是app组件）

    

~~~ts
function patch(vnode, container) {
  // 判断vnode是element还是component
  if (typeof vnode.type === "string") {
    // 处理element（vnode.type = div）
    processElement(vnode, container);
  } else if (isObject(vnode.type)) {
    // 处理组件
    processComponent(vnode, container);
  }
}

function processElement(vnode: any, container: any) {
  mountElement(vnode, container)
}

function mountElement(vnode: any, container: any) {
  // 创建一个element
  const el = document.createElement(vnode.type)

  // string array children是render函数返回的第三个参数
  const {children} = vnode;
  if (typeof children === 'string') {
    el.textContent = children;
  } else if (Array.isArray(children)) {
    mountChildren(vnode, el)
  }

  // props
  const {props} = vnode;
  for (const key in props) {
    const val = props[key];
    el.setAttribute(key, val)
  }

  container.append(el)
}

function mountChildren(vnode: any, container: any) {
      // array里每一个都是虚拟节点
      vnode.children.forEach((v) => {
        patch(v, container)
      })
}
~~~



## 实现组件代理对象

## 实现shapeFlags

