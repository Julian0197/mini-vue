# 渲染器首次渲染流程
## 实现初始化component主流程

先看看，vue3中初始绑定html的写法

~~~html
 <!DOCTYPE html>
 <html lang="en">
   <head>
     <meta charset="UTF-8">
     <meta http-equiv="X-UA-Compatible" content="IE=edge">
     <meta name="viewport" content="width=device-width, initial-scale=1.0">
     <title>Document</title>
   </head>
   <body>
     <div id="app"></div>
     <!-- 避免使用打包工具打包，降低流程，便于调试，这里直接将逻辑放在render.js中，使用script标签进行引入 -->
     <script src="./process/render.js"></script>
   </body>
 </html>
~~~

html的内容如何与vue3中的逻辑代码进行绑定？依靠的是Vue项目工程main.js文件汇总

~~~js
import App from './App.vue'


// 处理vue中组件逻辑内容，再挂载到真实dom节点上
createApp(App).mount('#app')                                
~~~

先不关心`createApp`和`mount`函数的实现。createApp接受的参数`App`就是通常在vue项目工程主文件的`App.js`中，通常也是vue项目的主入口：

~~~vue
export default {
    setup() {
        return {}
    }
}

 <template>
  <div>
   	hello mini-vue!
  </div>
</template>
~~~

vue3提供`render`和`h函数`，用于编程式地创建组件虚拟DOM树的函数，解析和创建`vnode`节点。

本文中单文件组件不在template中写，这需要编译能力，而是直接在render函数中实现

~~~js
 // 第二种方式
export const App = {
  render() {
    return h("div", "hi, " + this.msg)
  },

  setup() {
    // composition api

    return {
      msg: 'mini-vue'
    }
  }
}
~~~

<img src="C:\Users\MSK\AppData\Roaming\Typora\typora-user-images\image-20221202133657665.png" alt="image-20221202133657665" style="zoom: 200%;" />

### createApp

`createApp(App).mount("#app")`

在createApp中，接受App单文件组件内容（App.js），需要返回一个对象，这个对象有一个mount方法，会把单文件组件先转化为虚拟节点，后续所有逻辑也都基于虚拟节点处理，最后将其挂载到根节点上

~~~ts
export function createApp(rootComponent) {
  return {
    mount(rootContainer) {
      // 先把所有东西转化为虚拟节点vnode
      // 后续所有逻辑操作基于 vnode 处理

      const vnode = createVNode(rootComponent);

      render(vnode, rootContainer);
    }
  }
}
~~~

### createVNode

createVNode用于创建虚拟节点，`type`描述节点对象，`props`描述属性，`children`描述子节点

~~~ts
export function createVNode(type, props?, children?) { // ?表示可选参数
  const vnode = {
    type,
    props,
    children
  };

  return vnode
}
~~~

### render & patch

render函数为处理和渲染 vnode 的入口函数

patch函数为处理节点类型的中转站，此时只增加`component`的逻辑：

~~~ts
export function render(vnode, container) {

  // 调用patch方法（方便后续递归处理）
  patch(vnode, container)
}

 const patch = function(vnode, container) {
   // 调用processComponent函数，对component的vnode进行处理
   processComponent(vnode, container)
 }
~~~

### processComponent

继续调用mountCompount对组件解析

~~~js
 const processComponent = function(vnode, container) {
   mountComponent(vnode, container)
 }
~~~

### mountComponent

用于拆解组件，组件中有`setup()`和`render() {}`

所以`mountComponent`首先要执行`setup`，setup的返回值是dom中需要触发、渲染用到的数据。再对`render`函数中`h`函数返回的vnode进行处理和渲染

~~~ts
function mountComponent(vnode, container) {
  // 创建组件实例
  const instance = createComponentInstance(vnode);
  // 处理setup  
  setupComponent(instance)
  // 处理render
  setupRenderEffect(instance, container)
}
~~~

------ 分割线 下面为一系列的`componet`处理函数 ------

`component.ts`

#### createComponentInstance

createComponentInstance用于创建额包装一个component对象，挂载属性，便于后续处理

~~~js
function createComponentInstance(vnode) {
    const component = {
        vnode,
        type: vnode.type,
        // 用于保存setup函数执行结果
        setupState: {}
    }

	return component
}
~~~

#### setupComponent

继续调用setupStatefulComponent对setup函数处理

~~~ts
function setupComponent(instance) {
    setupStatefulComponent(instance)
}
~~~

#### setupStatefulComponent

调用setup函数，保存执行结果

~~~js
function setupStatefulComponent(instance) {
    // 如果使用component组件来初始化vnode，整个组件对象会保存在type中
    const component = instance.type
    const { setup } = component
    
    if (setup) {
        // 执行setup
        const setupResult = setup()
        // 调用handleSetupResult处理
        handleSetupResult(instance, setupResult)
    }
}
~~~

需要注意的是，关于在什么地方获取`setup`，如果使用`component`来初始化`vnode`，整个的组件对象会保存在`vnode`的`type`中，这一点是和`element`有区别的。可以看一下`createVNode`函数的实现和调用逻辑。

#### handleSetupResult

保存setup函数的执行结果，便于后续应用

~~~ts
function handleSetupResult(instance, setupResult) {
    if (typeof setupResult === 'object') {
        // 将执行结果设置到ocmponent的实例中
        instance.setupState = setupResult
    }
    // 取得vnode中的render函数，保存到component的实例中，相当于解构，少一层访问
    instance.render = instance.type.render
}
~~~

------ 分割线 `component`类型调用结束 ------

### setupRenderEffect

开始调用vnode中的render函数，处理vnode节点

~~~ts
 const setupRenderEffect = function(instance, container) {
   // 执行render函数
   const subTree = instance.render()
   // 由于执行render后返回依然是一个vnode对象，继续递归调用patch进行处理
   patch(subTree, container)
 }
~~~

## rollup打包库

+ `Rollup`是一个模块打包器，和`webpack`类似
+ `Rollup`支持`Tree-shaking`，开元静态分析代码中的`import`，排除不被使用的代码
  + `webpack`虽然也支持，但是需要我们手动配置
+ 打包的结果比`webpack`小
+ 打包框架/组件库使用`Rollup`更合适



安装rollup

~~~powershell
yarn add rollup --dev
~~~

创建rollup.config.js，配置

~~~js
import typescript from "@rollup/plugin-typescript";

export default {
  // 入口文件
  input: "./src/index.ts",
  // 出口文件
  output: [
    // 1.cjs -> comonjs
    // 2.esm -> es6模块规范（标准）
    {
      format: "cjs",
      file: "lib/guide-mini-vue.csj.js",
    },
    {
      format: "es",
      file: "lib/guide-mini-vue.esm.js",
    },
  ],
  /// 安装转译官方插件 ts-->js @rollup/plugin-typescript
  plugins: [typescript()],
};
~~~

在package.json中配置一下rollup命令

-c指定运行的文件

~~~json
"scripts": {
    "build": "rollup -c rollup.config.js"
}
~~~

同时还需要安装`@rollup/plugin-typescript`，`typescript`,`tslib`相关依赖



在runtime-core中需要导出createApp和h

~~~ts
// runtime-core/index.ts

export { createApp } from "./creatApp" 
export { h } from "./h"
~~~

在出口文件中把runtime-core中全部导出

~~~ts
// src/index.ts

export * from './runtime-core/index'
~~~

之前的流程已经处理，接下来写个hello world，创建exanple/helloworld

App.js

```js
import { h } from '../../lib/mini-vue.esm.js'
 
export const App = {
  render() {
    return h("div", "hi, " + this.msg)
  },

  setup() {
    // composition api

    return {
      msg: 'mini-vue'
    }
  }
}
```

index.html

```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>mini-vue</title>
</head>
<body>
    <div id="app"></div>
    <script src="main.js" type="module"></script>
</body>
</html>
```

main.js

```js
import { createApp } from "../../lib/mini-vue.esm.js"
import { App } from "./App.js"

const rootContainer = document.querySelector("#app")
createApp(App).mount(rootContainer)
```

到此为止，最基本的框架搭建完成。

我们运行index.html，报错instance.render不是一个function

<img src="C:\Users\MSK\AppData\Roaming\Typora\typora-user-images\image-20221204205102827.png" alt="image-20221204205102827" style="zoom:50%;" />

原因：

在main.js中，`creatApp(App).mount(rootContainer)`会调用`render`，再调用`patch`，调用其他函数之后，还会递归调用patch处理，此时patch处理的不是组件而是element（`div`），此时并没有render这个函数，所以报错。后续针对`render`要区分`element`和`component`

**路径优化：**

在package.json中配置esm和cjs的入口

~~~json
"main": "lib/mini-vue.cjs.js",
"moudle": "lib/mini-vue.esm.js"
~~~

~~~js
import pkg from './package.json'

  output: [
    // 1.cjs -> comonjs
    // 2.esm -> es6模块规范（标准）
    {
      format: "cjs",
      file: "pkg.main",
    },
    {
      format: "es",
      file: "pkg.moudle",
    },
  ], 
~~~

## 初始化element主流程

当我们`createApp(app).mount(rootContainer)`后，会将app变成vnode，并调用其中的render函数，render函数在处理render时，执行`setupRenderEffect`返回的值还是vnode会再调用patch函数，但是**此时的vnode不是component而是element**，这里要进行区分。

~~~js
  render() {
    return h("div", {
      id: "root",
      class: ["red", "hard"],
    },
      // "hi, mini-vue"  children是简单的string类型
      [h("p", {class: "red"}, "hi"), h("p", {class: "blue"}, "mini-vue")]
    )
  },
~~~

### h函数

h函数同样是返回一个vnode，参数也是type、porps和children

~~~ts
 const h = function(type, props, children) {
   return createVNode(type, props, children)
 }
~~~

### 修改patch中处理element

+ 从`vnode.type`区分到底是element还是component

  + string类型 => element，object => component

+ processElement中调用mountElement

  + `document.createElement(vnode.type)`创建一个el

  + `const {children, props} = vnode`解构一下vnode

  + 如果children是string，直接`el.textContent = children`，如果children是数组，还需要递归调用patch，注意此时patch的container参数是当前的el

  + 遍历props，利用`el.setArrtibute(key, value)`赋予属性
+ `container.append(el)`最后把当前el添加到container容器中（这里container是app组件）

    

~~~ts
function patch(vnode, container) {
  // 判断vnode是element还是component
  if (typeof vnode.type === "string") {
    // 处理element（vnode.type = div）
    processElement(vnode, container);
  } else if (isObject(vnode.type)) {
    // 处理组件
    processComponent(vnode, container);
  }
}

function processElement(vnode: any, container: any) {
  mountElement(vnode, container)
}

function mountElement(vnode: any, container: any) {
  // 创建一个element
  const el = document.createElement(vnode.type)

  // string array children是render函数返回的第三个参数
  const {children} = vnode;
  if (typeof children === 'string') {
    el.textContent = children;
  } else if (Array.isArray(children)) {
    mountChildren(vnode, el)
  }

  // props
  const {props} = vnode;
  for (const key in props) {
    const val = props[key];
    el.setAttribute(key, val)
  }

  container.append(el)
}

function mountChildren(vnode: any, container: any) {
      // array里每一个都是虚拟节点
      vnode.children.forEach((v) => {
        patch(v, container)
      })
}
~~~

## 实现组件代理对象

~~~js
export const App = {
  render() {
    return h("div", {
      id: "root",
      class: ["red", "hard"],
    },
      // 在render中使用setup的数据
      "Hi, " + this.msg
    )
  },
  setup() {
    return {
      msg: 'mini-vue'
    }
  }
}
~~~

接下来要在render函数中**通过this访问setup中的msg**：在执行render函数时，将this绑定到setup函数返回的对象上(`setupState`)。

除此之外，我们没有在setup()中定义`$el`，但是vue3提供了`this.$el`用于访问组件实例管理的DOM根节点。

`$el`：直到组件挂载完成之前都是`undefined`

+ 对于单一根元素的组件，`$el`指向根元素
+ 对于以文本节点为根的组件，`$el` 将会指向该文本节点。
+ 对于以多个元素为根的组件，`$el` 将是一个仅作占位符的 DOM 节点，Vue 使用它来跟踪组件在 DOM 中的位置 (文本节点或 SSR 激活模式下的注释节点)。

**解决方法：**

这里用到了代理对象`Proxy`，我们需要通过this访问到`setupState`中的data以及`$el`、`$data`等相关属性。

+ 在组件初始化时创建代理对象
+ 在调用render函数时，将proxy绑定到render函数的this上



首先在mountComponent中处理setup时，在函数setupStatefulComponent中，我们拿到了setup函数返回的对象。同时，生成组件实例的代理对象，这里的组件实例就是app处理后的虚拟节点。

在Proxy中的handler对象中的get函数里，针对要访问的key进行返回值。因为我们将handler函数封装，所以要传入一个instance。

~~~ts
// component.ts

function setupStatefulComponent(instance: any) {
  // 先拿setup的返回值
  const Component = instance.type;

  instance.proxy = new Proxy(
    {_: instance}, 
    PublicInstanceProxyHandlers
  )

  const { setup } = Component;

  if (setup) {
    // setup可以返回obj或者function
    const setupResult = setup();
    handleSetupResult(instance, setupResult);
  }
}

function handleSetupResult(instance, setupResult: any) {
  // 基于function 或 object
  // TODO function
  if (typeof setupResult === "object") {
    instance.setupState = setupResult;
  }
  finishComponentSetup(instance);
}
function finishComponentSetup(instance: any) {
  const Component = instance.type; 
  instance.render = Component.render;
}
~~~

单独封装代理对象的handler对象。利用map对象保存\$el,$data等属性，写成函数形式。

+ 如果是setup函数中的值，返回instance.setupState[key]

+ 如果是`$el`等属性，返回instance.vnode.el，这里instance是组件实例（具有vnode，type，setupState属性）

~~~ts
// 利用map对象保存$el,$data等属性
const publicPropertiesMap = {
  // 写成函数形式
  $el: (i) => i.vnode.el
}


export const PublicInstanceProxyHandlers = {
  get({_: instance}, key) {
    // setupState
    const { setupState } = instance;
    if (key in setupState) {
      return setupState[key];
    }

    const publicGetter = publicPropertiesMap[key]
    if (publicGetter) {
      return publicGetter(instance)
    }
  }
}
~~~



前面提到访问`$el`，通过`return instance.vnode.el`实现的，所以在创建component实例时，要初始化一个el值。

~~~ts
// vnode.ts

export function createVNode(type, props?, children?) { // ?表示可选参数
  const vnode = {
    type,
    props,
    children,
    el: null,
  };

  return vnode
}
~~~

接下来要考虑什么时候给vnode.el赋值，我们的`el`是组件的根节点，他不是component而是elment，所以是在mountElement中获取的。注意这里的vnode是app的vnode，我们将后续的`vnode`用`initialVnode`代替，使得代码结构更清晰。

~~~ts
function mountElement(vnode: any, container: any) {
  // 创建一个element,保存到vnode中
  const el = (vnode.el = document.createElement(vnode.type))

  // string array children是render函数返回的第三个参数
  const {children} = vnode;
  if (typeof children === 'string') {
    el.textContent = children;
  } else if (Array.isArray(children)) {
    mountChildren(vnode, el)
  }

  // props
  const {props} = vnode;
  for (const key in props) {
    const val = props[key];
    el.setAttribute(key, val)
  }

  container.append(el)
}
~~~



当我们执行render App时，执行到mountComponent时，需要创建组件实例，处理setup，继续处理render。此时执行render函数，再执行h函数得到`subTree`（这是新的虚拟节点），这个时候再对subTree进行patch，然后再执行`mountElement`，在这个函数中我们给subTree虚拟节点的el赋予正确的el（这里是`div`），执行完subTree的patch后，给我们的initialVnode.el也就是app的vnode.el赋予subTree的el。`initialVnode.el = subTree.el`

我们在render函数中利用`this.XXX`访问相关属性，所以执行render函数时，使用`call`绑定我们的额代理对象：`const subTree = instance.render.call(proxy)`

~~~ts
function setupRenderEffect(instance: any, initialVnode: any, container: any) {
  const { proxy } = instance;
  
  // 执行render函数
  const subTree = instance.render.call(proxy);
  // 由于执行render后返回依然是一个vnode对象，继续递归调用patch处理
  patch(subTree, container);
  // patch对h函数返回的vnode进行处理（这里就是subTree）
  // 在执行mountElement后，subTree.el已经赋好值了，这个时候再把值给vnode.el
  initialVnode.el = subTree.el
}
~~~



至此实现了组件化代理对象

测试的时候，我们再app.js中，先执行`window.self = null`，在render函数中在给他赋予当前render函数中的this：`window.self = this`，我们希望这个this是我们组件实例的代理对象`proxy`。

<img src="C:\Users\MSK\AppData\Roaming\Typora\typora-user-images\image-20221206225652014.png" alt="image-20221206225652014" style="zoom:43%;" />

## 实现shapeFlags

 之前判断当前vnode是element还是component类型，或者判断children是string还是array，都采用`if (typeof vnode.type === "string") `判断。

使用**位运算**判断，更能提升运算销量。



创建一个ShapeFlags枚举类型，用二进制数反映各种类型

~~~ts
export const enum ShapeFlags {
  ELEMENT = 1, // 0001
  STATEFUL_COMPONENT = 1 << 1, // 二进制左移一位，0010
  TEXT_CHILDREN = 1 << 2, // 0100
  ARRAY_CHILDREN = 1 << 3, // 1000
    
// 位运算
// 0000
// 0001 -> element
// 0010 -> stateful_component
// 0100 -> text_children
// 1000 -> array_children

// | (两位都为0，才为0)
// & (两位都为1，才为1)

// 修改用或运算，查找用与运算
~~~

举例：

+ 当前节点是`element`，它地shapeFlags是`0001`，我们通过`&`判断他到底是不是`stateful_component`，`0001 & 0010`结果为`0000`,肯定是false
+ 当前节点的shapeFlag是`0001`，但是它的children类型是`array_children`，通过`|`运算，`0001 | 1000`，结果是`1001`，表示两种状态。

我们在vnode中，也要新增shapeFlags属性，并根据vnode.type和children的类型，修改shapeFlags的值。

~~~ts
// vnode.ts

import { ShapeFlags } from "../shared/ShapeFlags";

export function createVNode(type, props?, children?) {
  // ?表示可选参数
  const vnode = {
    type,
    props,
    children,
    shapeFlag: getShapeFlag(type),
    el: null,
  };

  // children
  if (typeof children === "string") {
    vnode.shapeFlag |= ShapeFlags.TEXT_CHILDREN;
  } else if (Array.isArray(children)) {
    vnode.shapeFlag |= ShapeFlags.ARRAY_CHILDREN;
  }

  return vnode;
}

// 之前都采用if (typeof vnode.type === "string") 判断类型
function getShapeFlag(type) {
  return typeof type === "string"
    ? ShapeFlags.ELEMENT
    : ShapeFlags.STATEFUL_COMPONENT;
}
~~~

在render时判断类型就可以采用与运算

~~~ts
function patch(vnode, container) {
  const { shapeFlag } = vnode;
  // 判断vnode是element还是component
  if (shapeFlag & ShapeFlags.ELEMENT) {
    // 处理element（vnode.type = div）
    processElement(vnode, container);
  } else if (shapeFlag & ShapeFlags.STATEFUL_COMPONENT) {
    // 处理组件
    processComponent(vnode, container);
  }
}
~~~

## 实现事件注册

实现以下事件注册

~~~ts
// render.ts

  render() {
    window.self = this
    return h("div", {
      id: "root",
      class: ["red", "hard"],
      onClick() {
        console.log("click")
      },
      onMousedown() {
        console.log("mousedown")
      }
    }
~~~



在mountElement时，处理props时（vnode对象的第二个属性），注册事件。

由于注册事件函数都是 on + Event name的形式，用正则表达式判断当前key是否是注册事件：`const isOn = (key: string) => /^on[A-Z]/.test(key);`

使用`el.addEventListener(event, val)`添加事件，其中event是`key.slice(2).toLowerCase()`

~~~ts
//render.ts

// mountElement函数
// props
  const {props} = vnode;
  for (const key in props) {
    const val = props[key];
    
    // 确认规范 on + Event name，使用正则表达式
    const isOn = (key: string) => /^on[A-Z]/.test(key);
    if (isOn(key)) {
      // 'onClick'第二位之后的是event name
      const event = key.slice(2).toLowerCase()
      el.addEventListener(event, val)
    } else {
      el.setAttribute(key, val)
    }  
  }
~~~

## 实现组件的 props

`props`用于父组件给子组件传值

注意：`component`类型的vnode中的`props`是用作为参数传递给`setup`函数的。`element`类型的vnode中的`props`用于设置当前el的`DOM属性`（比如class，事件）



先创建一个子组件嵌套，App组件中嵌套了子组件Foo，并给Foo传入了一个对象`{count: 7}`，我们希望：

+ 在子组件的`setup`中可以访问到父组件传递的对象（props）
+ 在子组件中可以通过`this`访问到props中的属性
+ 将父组建传递的props对象设置为`shallowReadonly`（浅只读），修改第一层会报错

~~~ts
export const App = {
  render() {
    window.self = this
    return h("div", 
    {
      id: "root",
    },
      [
        h(Foo, {
          count: 7,
        }),
      ]
    )
  },

  setup() {}
}

const Foo = {
  setup(props) {
    // props.count
    console.log(props);

    // props不可被修改 readonly
    props.count += 2;
    console.log(props);
  },
  render() {
    return h("div", {}, "foo: " + this.count);
  },
};
~~~



实现initProps，传入参数为当前组件实例，props对象为组件实例vnode中的props属性（instance是Foo，instance.vnode.props是{count: 7}）

~~~ts
// component.ts

export function setupComponent(instance) {
  // TODO
  // initSlots()
  initProps(instance, instance.vnode.props)
  
  setupStatefulComponent(instance);
}
~~~

单独封装处理组件props的功能

~~~ts
// componentProps.ts

export function initProps(instance, rawProps) {
  // app组件没有父组件传入的props，此时会报错
  instance.props = rawProps || {}

  // TODO attrs
}
~~~

在执行setup时候将props传入，并且包装成shallowReadonly

~~~ts

function setupStatefulComponent(instance: any) {
  // ...

  const { setup } = Component;

  if (setup) {
    // setup可以返回obj或者function
    // 这里传入props
    const setupResult = setup(shallowReadonly(instance.props));  // 这里对于app，props是undeifned
    handleSetupResult(instance, setupResult);
  }
}
~~~

这里注意：因为App组件没有props属性，所以instance.props传入的是undefined，而shallowReadonly传入一个undefined会报错。所以在initProps时，如果没有props，给他赋`{}`。

~~~ts
function createReactiveObject(target: any, baseHandlers) {
  // 判断传入的target是不是对象
  if (!isObject(target)) {
    console.warn(`target ${target} 必须是一个对象`)
    return target
  }

  return new Proxy(target, baseHandlers);
}
~~~

最后要通过this访问到props的属性，所以需要改写组件代理对象的getter函数

~~~ts
// componentPublicInstance.ts

export const PublicInstanceProxyHandlers = {
  get({_: instance}, key) {
    // setupState
    const { setupState, props } = instance;
    
    // hasOwn判断当前key在不在setupState或者props上
    const hasOwn = (obj, key) => Object.prototype.hasOwnProperty.call(obj, key)
    if (hasOwn(setupState, key)) {
      return setupState[key]
    } else if (hasOwn(props, key)) {
      return props[key]
    }

	// ...
}
~~~

至此，props功能实现

<img src="C:\Users\MSK\AppData\Roaming\Typora\typora-user-images\image-20221207151550930.png" alt="image-20221207151550930" style="zoom:50%;" />

## 实现组件 emit 功能

vue3中的`emit`用于在子组件内触发父组件传递的函数，可以在`setup`函数中的第二个参数中结构获取，`emit`是一个函数，用于指定函数名传递参数并触发函数。

~~~js
 const App = {
   setup(props, { emit }) {
     // 触发父组件传递的add函数
     emit('add', 1, 2)
   }
 }
~~~

我们重新写一个测试案例，测试emit的使用

App组件中，有子组件Foo，并向Foo中的第二个参数也就是props参数传递了两个函数

~~~ts
export const App = {
  name: "App",
  render() {
    // emit
    return h("div", {}, [
      h("div", {}, "App"),
      h(Foo, {
        // on + Event
        onAdd(a, b) {
          console.log("onAdd",a, b);
        },
        // add-foo => addFoo
        onAddFoo(a, b) {
          console.log("onAddFoo", a, b);
        }
      }),
    ]);
  },

  setup() {
    return {};
  },
};
~~~

在子组件Foo中，又包含了一个element，是一个button，点击button后触发emitAdd函数，在这个函数中使用`emit`触发App父组件传递的函数，并传入值。

~~~ts
export const Foo = {
  setup(props, { emit }) {
    const emitAdd = () => {
      emit("add", 1, 2);
      emit("add-foo", 3, 4)
    };

    return {
      emitAdd,
    };
  },

  render() {
    const btn = h(
      "button",
      {
        onClick: this.emitAdd,
      },
      "emitAdd"
    );

    const foo = h("p", {}, "foo");
    return h("div", {}, [foo, btn]);
  },
};
~~~

我们在setup中解构emit：`setup(props, { emit })`，因此在setupComponent中调用setup时要传入`emit`。

给组件实例初始化emit值，再调用setup函数时，传入emit属性

注意：emit函数要接受instance，但是用户写的时候不会传入，所以使用bind直接传入当前组件实例

~~~ts
// component.ts
export function createComponentInstance(vnode) {
  const component = {
    vnode,
    type: vnode.type,
    setupState: {},
    props: {},
    emit: () => {},
  };

  // 使用bind预先传入instance，emit函数只需要传入对应事件
  component.emit = emit.bind(null, component) as any;
  return component;
}



function setupStatefulComponent(instance: any) {
  // ...
  const { setup } = Component;

  if (setup) {
    // setup可以返回obj或者function
    // 这里传入props
    const setupResult = setup(shallowReadonly(instance.props), {
      emit: instance.emit,
    });  
    handleSetupResult(instance, setupResult);
  }
}
~~~



我们仍然单独封装处理emit的函数，需要解构instance中的props，接受用户传入的event以及参数

~~~ts
// componentEmit.ts
import { camelize, toHandlerKey } from "../shared";

export const emit = (instance, event, ...args) => {  
  const { props } = instance

  // 子组件中调用emit('add')，传入add，实际调用的是onAdd
  // 子组件中调用emit('add-foo')，传入add-foo，实际调用的是onAddFoo
  const handlerName = toHandlerKey(camelize(event))
  const handler = props[handlerName]
  handler && handler(...args);
}
~~~

最后需要根据接受的event参数，返回相应props中的函数执行。

我们继续封装起来。

~~~ts
// 首字母大写 add => Add
export const capitalize = (str: string) => {
  return str.charAt(0).toUpperCase() + str.slice(1);
};

// 转化为驼峰命名格式 add-foo => addFoo
export const camelize = (str: string) => {
  // _是"-foo"，c是"foo"，就是把-foo替换为Foo
  return str.replace(/-(\w)/g, (_, c: string) => {
    return c ? c.toUpperCase() : "";
  });
};

export const toHandlerKey = (str: string) => {
  return str ? "on" + capitalize(str) : "";
};
~~~

子组件中调用emit('add')，传入add，实际调用的是onAdd
子组件中调用emit('add-foo')，传入add-foo，实际调用的是onAddFoo

<img src="C:\Users\MSK\AppData\Roaming\Typora\typora-user-images\image-20221207165044682.png" alt="image-20221207165044682" style="zoom:50%;" />

至此，emit功能实现完毕。

## 实现组件slots功能

插槽`<slot>`元素是一个插槽出口，标识了父元素提供的插槽内容将在哪里被渲染。

这是在父组件中使用<FancyButton>组件

~~~vue
<FancyButton>
  Click me! <!-- 插槽内容 -->
</FancyButton>
~~~

而<FancyButton>的模板是：

~~~vue
<button class="fancy-btn">
  <slot></slot> <!-- 插槽出口 -->
</button>
~~~

最终渲染出的DOM是：

~~~html
<button class="fancy-btn">Click me!</button>
~~~

<img src="https://cn.vuejs.org/assets/slots.dbdaf1e8.png" alt="插槽图示" style="zoom:40%;" />

___


~~~js
// App.js
import Foo from 'Foo.js'
const App = {
    render() {
        const app = h("div", {}, "App")
        const foo = h(Foo, {}, h("div", {}, "slot"))
        return h("div", {}, [app, foo])
    }
}

// Foo.js
const Foo = {
    render() {
        return h("div", {})
    }
}
~~~

createApp => mount => createVNode(App)，这个时候App的vnode只有type属性 => render => patch => processComponent因为type不是字符串 => mountComponent => createComponentInstance创建了当前组件instance => setupComponent 把setup返回值加入到instance的setupState属性中。创建了当前app实例的proxy => setupRenderEffect => 拿到app实例的proxy，执行app自定义的render函数，render函数中this指向proxy，App的render函数通过h生成了两个vnode（app和Foo）。其中app的type和children是字符串，foo的type是component，children是array。render函数又返回了一个vnode，type是div，children是数组里面包含两个vnode对象。 => patch(render函数返回的vnode，容器是App) => processElement => mountElement 创建了el保存到当前vnode中，el是当前vnode的type，也就是div => mountChildren => patch(app)和patch(foo),这里写一下patch(foo) => foo vnode的type是component => processComponent => mountComponent => createComponentInstance 创建foo的组件实例 => setupComponent foo组件实例的render = Foo组件中的render函数 => setupRenderEffect 执行Foo的render函数，返回了一个vnode `h("div", {})`空的div。

所以在执行Foo的render函数时无法拿到App父组件中`const foo = h(Foo, {}, h("div", {}, "slot"));`赋予的children
___


由于目前还未实现模板编译功能，只能在`h`函数中使用：

在父组件中，使用h函数的第三个参数为对象形式标识插槽，key为插槽名称，value为函数，子组件调用可以传参

~~~js
 // 父组件
 // 具名插槽

 const son = h(Son, {}, {
   // name为子组件传递参数
   header: ({ age }) => h("p", {}, "header " + name),
   footer: () => h("p", {}, "footer"),
 })
~~~

~~~js
// 子组件 render函数中
const foo = h("p", {}, "foo");
const age = 18
return h('div', {}, [
   // 通过this.$slots来获取slots列表，功能同this.$el
   // 第二个参数为指定渲染slots，需同父组件的名城对应
   // 第三个参数为参数传递
   renderSlots(this.$slots, "header", {
     age,
   }),
   son,
   renderSlots(this.$slots, "footer"),
 ])
~~~

**实现思路：**

在子组件渲染时，判断当前子组件实例的`vnode.children`是不是对象，如果是对象，说明需要渲染`slots`。接下来对children中的值遍历，使用函数包裹（便于传参），挂载到`component`实例的`slots`属性中，在用户调用`renderSlots`函数时，根据名称将所属的`slot`取出来，使用第三个参数作为参数传入调用。最后调用`createVNode`函数创建`vnode`即可。



首先第一步需要添加“权限”，因为`children`所属类型又增加了一种形式：对象

~~~ts
 const ShapeFlags = {
   ELEMENT: 1,
   STATEFUL_COMPONENT: 1 << 1,
   TEXT_CHILDREN: 1 << 2,
   ARRAY_CHILDREN: 1 << 3,
   SLOT_CHILDREN: 1 << 4 //新增
 }
 
 const createVNode = function (type, props, children) {
   // 省略...
   
   // 为slots类型增加“权限”
   if(vnode.shapeFlag & ShapeFlags.STATEFUL_COMPONENT) { // 新增
     // 根绝children是否为对象来判断
     if(typeof children === 'object') { // 新增
       vnode.shapeFlag |= ShapeFlags.SLOT_CHILDREN // 新增
     }
   }
 
   return vnode
 }
~~~

接下来在初始化`component`实例时增加`slots`属性：

~~~ts
 const createComponentInstance = function (vnode) {
   const component = {
     vnode,
     type: vnode.type,
     props: {},
     setupState: {},
     slots: {}, // 新增
     emit: () => {} 
   }
 
   component.emit = emit.bind(null, component)
   return component
 }
 
 // 用于使用this进行访问slots
 const publicPropertiesMap = {
   $el: i => i.vnode.el,
   $slots: i => i.slots, // 新增
 }
~~~

在component实例上挂载slots列表：将`initSlots`抽离

~~~ts
export function initSlots(instance, children) {
  const { vnode } = instance;
   
  if (vnode.shapeFlag & ShapeFlags.SLOT_CHILDREN) {
    normalizeObjectSlots(children, instance.slots);
  }
}

function normalizeObjectSlots(children: any, slots: any) {
  for (const key in children) {
    const value = children[key];
    slots[key] = (props) => normalizeSlotValue(value[props]);
  }
}

function normalizeSlotValue(value) {
  return Array.isArray(value) ? value : [value];
}
~~~

最后返回`slots`函数的执行结果，相当于对比普通的渲染方式多了一层转换。

~~~ts
 const renderSlots = function(slots, name, props) { 
   const slot = slots[name] 
 
   if(slot) { 
     if(typeof slot === 'function') { 
       return slot(props) 
     } 
   }
 }
~~~

至此，slot的功能实现完毕。

## 实现Fragment和Text类型节点

在实现上一节`slot`功能时，利用`createVNode("div", {}, slot(props))`实现，需要包裹一层div，并把插槽部分放在children中（针对数组）。我们并不想要插槽外部还有一层div包裹。

我们将renderSlot中的type设置为Fragment

~~~Ts
// renderSlot
export function renderSlots(slots, name, props) {
  const slot = slots[name]
  if (slot) {
    if (typeof slot === 'function') {
      return createVNode(Fragment, {}, slot(props))
    }
  }
}
~~~

在patch时，在区分type类型为Fragment类型的情况，以后可能还有其他特殊类型要添加，所以这里有switch实现

~~~ts
// render.ts

function patch(vnode, container) {
  const { type, shapeFlag } = vnode;

  // Fragment => 只渲染 children
  switch (type) {
    case Fragment:
      processFragment(vnode, container)
      break;

    default:
      // 判断vnode是element还是component
      if (shapeFlag & ShapeFlags.ELEMENT) {
        // 处理element（vnode.type = div）
        processElement(vnode, container);
      } else if (shapeFlag & ShapeFlags.STATEFUL_COMPONENT) {
        // 处理组件
        processComponent(vnode, container);
      }
  }
}
~~~

而我们processFragment只需要将children渲染就可以了，调用mountChildren遍历children再patch

~~~ts
function processFragment(vnode: any, container: any) {
  // 将所有children渲染出来
  mountChildren(vnode, container);
}
~~~

Fragment设置成为Symbol类型抽离出来

~~~ts
// vnode.ts
export const Fragment = Symbol("Fragment");
~~~

<img src="C:\Users\MSK\AppData\Roaming\Typora\typora-user-images\image-20221208131705028.png" alt="image-20221208131705028" style="zoom:40%;" />

至此，Fragment功能实现完毕。



新需求：我们想要直接渲染文字节点，而不是将文字包裹在h函数中`h('div', {}, "你好")`，创建一个`createTextVNode("你好")`包裹文字。

~~~ts
  render() {
    const app = h("div", {}, "App");
    const foo = h(
      Foo,
      {},
      {
        header: ({ age }) =>
          h("p", {}, ["header" + age, createTextVNode("你好")]),
        footer: () => h("p", {}, "footer"),
      }
    );

    return h("div", {}, [app, foo]);
  },
~~~



同理，我们创建一个createTextVNode函数和一个Text Symbol类型。

~~~ts
// vnode.ts

export const Text = Symbol("Text");

export function createTextVNode(text: string) {
  return createVNode(Text, {}, text)
}
~~~

在render函数中，Text类型作为switch的一种case

processText直接拿到vnode的children也就是文本，利用`document.createTextNode`原生方法创建文本节点。还要记得把当前文本节点给当前的vnode.el，之前这一步是在mountElement中实现的。

~~~Ts
// render.ts

case Text:
      processText(vnode, container);
      break;

function processText(vnode: any, container: any) {
  const { children } = vnode;
  const textNode = (vnode.el = document.createTextNode(children));
  container.append(textNode);
}
~~~

最后记得在runtime-core的入口文件导出`createTextVNode`

这样打包时候，才会将他们导入到mini-vue.esm.js中去

<img src="C:\Users\MSK\AppData\Roaming\Typora\typora-user-images\image-20221208135049895.png" alt="image-20221208135049895" style="zoom:40%;" />

至此text类型节点实现完毕。

## 实现getCurrentInstance

我们想要在组件的setup函数中，访问到当前组件的instance

~~~js
// App.js

export const App = {
  name: "App",
  render() {
    return h("div", {}, [h("p", {}, "currentInstance demo"), h(Foo)])
  },

  setup() {
    const instance = getCurrentInstance()
    console.log("App:", instance);
    return {};
  },
};
~~~

~~~js
// Foo.js

export const Foo = {
  name: "Foo",
  setup() {
    const instance = getCurrentInstance()
    console.log("Foo:", instance);
    return {};
  },

  render() {
    return h("div", {}, "foo")
  },
};
~~~

我们定义一个函数getCurrentInstance来获取当前组件实例

需要再setup中获取，setup结束前将currentInstance设置为null

利用函数封装`currentInstance = xxx`避免不必要的改动

~~~ts
// component.ts

if (setup) {
    // 拿到当前的组件实例对象
    setCurrentInstance(instance)

    // setup可以返回obj或者function
    // 这里传入props
    const setupResult = setup(shallowReadonly(instance.props), {
      emit: instance.emit,
    });  

    setCurrentInstance(null);

    handleSetupResult(instance, setupResult);
  }
~~~

~~~ts
// component.ts

let currentInstance = null;

export function getCurrentInstance() {
  return currentInstance
}

export function setCurrentInstance(instance) {
  currentInstance = instance
}
~~~

最后在runtime-core的index.ts中导出，getCurrentInstance，rollup会将这个函数打包。

## 实现provide/inject功能

vue中的`provide/inject`可以实现跨层级组件通信，前面实现的`props`

适用于父子组件通信。

现在使用一对 `provide` 和 `inject`。无论组件层次结构有多深，父组件都可以作为其所有子组件的依赖提供者。这个特性有两个部分：父组件有一个 `provide` 选项来提供数据，子组件有一个 `inject` 选项来开始使用这些数据。

<img src="https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/64782990ebcd4c1d96638daf7e84ab64~tplv-k3u1fbpfcp-zoom-in-crop-mark:4536:0:0:0.awebp?" alt="webp.png" style="zoom:63%;" />

下面是我们的测试案例：

总共有三个组件：`Father`,`Son`,`GrandSon`层层嵌套

1. Father provide foo和bar
2. Son provide foo并inject foo
3. GrandSon inject foo,bar,baz,ff

我们希望：Son能接收到Father提供的foo；GrandSon接受到的Son的foo；同时对于没有提供的变量，会返回默认值。

~~~js
// App.js

const Father = {
  name: "Father",
  setup() {
    provide("foo", "fooVal-father");
    provide("bar", "barVal-father");
  },
  render() {
    return h("div", {}, [h("p", {}, "Father"), h(Son)]);
  },
};

const Son = {
  name: "Son",
  setup() {
    provide("foo", "fooVal-son");
    const foo = inject("foo");
    return {
      foo,
    };
  },
  render() {
    return h("div", {}, [
      h("p", {}, `Son获取Farher: -${this.foo}`),
      h(GrandSon),
    ]);
  },
};

const GrandSon = {
  name: "GrandSon",
  setup() {
    const foo = inject("foo");
    const bar = inject("bar");
    const baz = inject("baz", "defaultBaz");
    const ff = inject("ff", () => "ffDefault");

    return {
      foo,
      bar,
      baz,
      ff,
    };
  },
  render() {
    return h(
      "div",
      {},
      `GrandSon获取Father: -${this.foo} - ${this.bar} - ${this.baz} - ${this.ff}`
    );
  },
};

export default {
  name: "App",
  setup() {},
  render() {
    return h("div", {}, [h("p", {}, [h("p", {}, "apiInject"), h(Father)])]);
  },
};
~~~



首先在组件实例中，添加`provides`和`parent`属性，parent属性指向当前组件父级：这里要修改很多，vscode使用`F8`就能找到报错代码，一步步修改。注意两点：

+ 一开始patch，parent为null
+ 在`setupRenderEffect`中patch子组件时，parent就是当前的`instance`

将`provides`的属性指向`parent.provides`，目的是为了实现跨层级访问

​	

~~~ts
// component.ts

 const createComponentInstance = function (vnode, parent) { // 修改
   const component = {
     vnode,
     type: vnode.type,
     props: {},
     setupState: {},
     // 添加provides，初始化为parent的provides
     provides: parent ? parent.provides : {}, // 修改
     // 添加parent，用于保存父级component实例
     parent: parent ? parent : {}, // 修改
     slots: {},
     emit: () => {} 
   }
 
   component.emit = emit.bind(null, component)
 
   return component
 }
~~~

单独封装`apiInject`处理`provide/inject`

通过`getCurrentInstance`获取当前`instance`，注意instance只能在`setup`中获取。

在provide函数中，拿到当前instance的provides和parent的provides，如果两者相同，说明是第一次provide，初始化`currentInstance.provides`为空对象，并将它的原型对象指向`parent.provides`：利用`provides = currentInstance.provides = Object.create(parentProvides);`

**注意：**`provides = currentInstance.provides`，由于provides是ES6解构出来的，他是一个新的变量对解构对象有一层浅拷贝，所以当我们修改了对象的数据，provides的值也需要再重新引用。

~~~ts
import { getCurrentInstance } from "./component";

export function provide(key, value) {
  // 父组件存储数据
  const currentInstance: any = getCurrentInstance(); // 只有在setup内部使用

  if (currentInstance) {
    // ES6对象结构，创建一个新变量provides，浅拷贝对象的属性
    let { provides } = currentInstance;
    // 拿到父亲的provides
    const parentProvides = currentInstance.parent.provides;
    // 初始化状态：说明当前provides还没有赋值
    if (provides === parentProvides) {
      // 当前组件provides变成了一个空对象，且原型指向parentProvides
      provides = currentInstance.provides = Object.create(parentProvides);
    }
    provides[key] = value;
  }
}
~~~

在inject函数中，只需要拿到当前实例的父亲的provides，按要求返回值。

添加一个`defaultValue`参数，接受默认值或者函数

~~~ts
export function inject(key, defaultValue) {
  // 子孙组件获取数据
  const currentInstance: any = getCurrentInstance();

  // 这个if判断当前是在setup中
  if (currentInstance) {
    const parentProvides = currentInstance.parent.provides;

    if (key in parentProvides) {
      return parentProvides[key];
    } else if (defaultValue) {
      if (typeof defaultValue === 'function') {
        return defaultValue()
      } else {
        return defaultValue
      }
    }  
  }
}
~~~

记得在runtime-core的index.ts中导出这两个函数

至此，`provide/inject`功能实现完毕

<img src="C:\Users\MSK\AppData\Roaming\Typora\typora-user-images\image-20221208222928786.png" alt="image-20221208222928786" style="zoom:40%;" />
